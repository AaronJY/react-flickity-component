{"version":3,"sources":["../src/index.js"],"names":["FlickityComponent","props","state","selectedIndex","flickityReady","carousel","flkty","updateSelected","bind","imagesLoaded","index","setState","onSwipe","prevProps","childrenDidChange","children","length","reloadOnUpdate","reloadCells","off","destroy","disableImagesLoaded","instance","options","on","flickityRef","mountNode","querySelector","createElement","elementType","className","ref","c","renderPortal","propTypes","bool","object","string","array","func","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["import React, { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport Flickity from 'flickity';\nimport imagesloaded from 'imagesloaded';\nimport { canUseDOM } from 'fbjs/lib/ExecutionEnvironment';\nimport PropTypes from 'prop-types';\n\nclass FlickityComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedIndex: 0,\n      flickityReady: false,\n    };\n\n    this.carousel = null;\n    this.flkty = null;\n    this.updateSelected = this.updateSelected.bind(this);\n    this.imagesLoaded = this.imagesLoaded.bind(this);\n  }\n\n  updateSelected() {\n    const index = this.flkty.selectedIndex;\n    this.setState({\n      selectedIndex: index,\n    });\n    if (this.props.onSwipe) {\n      this.props.onSwipe(index);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const childrenDidChange =\n      prevProps.children &&\n      prevProps.children.length !== this.props.children.length;\n    if (this.props.reloadOnUpdate || childrenDidChange) {\n      this.flkty.reloadCells();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.flkty) {\n      this.flkty.off('cellSelect', this.updateSelected);\n      this.flkty.destroy();\n    }\n  }\n\n  imagesLoaded() {\n    if (!this.props.disableImagesLoaded && canUseDOM) {\n      imagesloaded(\n        this.carousel,\n        function(instance) {\n          this.flkty.reloadCells();\n        }.bind(this)\n      );\n    }\n  }\n\n  componentDidMount() {\n    const carousel = this.carousel;\n    if (canUseDOM) {\n      this.flkty = new Flickity(carousel, this.props.options);\n      this.flkty.on('cellSelect', this.updateSelected);\n      this.imagesLoaded();\n      this.setState({ flickityReady: true });\n      if (this.props.flickityRef) {\n        this.props.flickityRef(this.flkty);\n      }\n    }\n  }\n\n  renderPortal() {\n    if (!this.carousel) {\n      return null;\n    }\n    const mountNode = this.carousel.querySelector('.flickity-slider');\n    if (mountNode) {\n      return createPortal(this.props.children, mountNode);\n    }\n  }\n\n  render() {\n    return React.createElement(\n      this.props.elementType,\n      {\n        className: this.props.className,\n        ref: c => {\n          this.carousel = c;\n        },\n      },\n      this.renderPortal()\n    );\n  }\n}\n\nFlickityComponent.propTypes = {\n  disableImagesLoaded: PropTypes.bool,\n  reloadOnUpdate: PropTypes.bool,\n  options: PropTypes.object,\n  className: PropTypes.string,\n  elementType: PropTypes.string,\n  children: PropTypes.array,\n  onSwipe: PropTypes.func,\n  flickityRef: PropTypes.func,\n};\n\nFlickityComponent.defaultProps = {\n  disableImagesLoaded: false,\n  reloadOnUpdate: false,\n  options: {},\n  className: '',\n  elementType: 'div',\n};\n\nexport default FlickityComponent;\n"]}